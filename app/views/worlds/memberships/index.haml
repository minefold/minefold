- title "#{world.name} players"

.page-header
  %h1 #{world.name} players
  %p
    = link_to player_world_path(player, world) do
      ‚Üê back to #{world.name}

.row
  .span6
    - if can?(:operate, world)
      = form_tag player_world_players_path, method: :post, class: %w(form-inline well) do

        = text_field_tag :username, nil, placeholder: "Minecraft username", autocomplete: 'off', maxlength: 16

        = submit_tag 'Add to whitelist', class: %w(btn btn-primary)

      %hr

    %ul.unstyled
      - world.players.sort_by{|p| (world.player_opped?(p) ? "0" : "1") + p.username.downcase }.each do |p|
        %li
          = link_to player_path(p.slug), class: 'avatar' do
            = player_avatar_tag p, size: :medium
          .meta
            .username
              = p.username
              - if world.player_opped? p
                %em.highlight (op)
            Joined #{time_ago_in_words(p.created_at)} ago.
            - if p.played?
              Last played #{time_ago_in_words(p.last_connected_at)} ago.

            - if can?(:operate, world) and p != world.creator.minecraft_player
              = link_to 'Remove', player_world_player_path(world.creator.minecraft_player, world, p), method: :delete

  - if can?(:operate, world) and world.membership_requests.any?
    .span6
      %h3 Pending Membership Requests
      - world.membership_requests.each do |r|
        - if player = r.player
          .friend-to-invite
            = link_to 'Ignore', player_world_membership_request_path(world.creator.minecraft_player, world, r), method: :delete, class: %w(btn pull-right)

            = button_to 'Approve', approve_player_world_membership_request_path(world.creator.minecraft_player, world, r), method: :put, class: %w(btn btn-success pull-right)

            .pull-left
              = link_to player_avatar_tag(player, size: :medium), player_path(player)
            .pull-left
              = player.username
