- title "#{world.name} members"
- masthead do
  %h1 #{world.name} members
  %p
    = link_to player_world_path(player, world) do
      ‚Üê back to #{world.name}

%section
  - if can? :operate, world
    - if world.membership_requests.any?
      %h2 Pending Membership Requests
      %section.members
        %ul
          - world.membership_requests.each do |r|
            - player = r.user.minecraft_player
            %li
              = link_to player_path(player) do
                = player_avatar_tag player, size: :medium
              .meta
                .username= player.username
                .actions
                  = button_to 'Approve', approve_player_world_membership_request_path(world.creator.minecraft_player, world, r), method: :put, class: 'approve'
                  = button_to 'Ignore', player_world_membership_request_path(world.creator.minecraft_player, world, r), method: :delete, class: 'ignore'

- if can? :operate, world
  %section
    %h2 Add a friend
    = form_tag player_world_players_path, method: :post, id: 'add-member' do
      = hidden_field_tag :id
      %fieldset.username
        = text_field_tag :username, nil, placeholder: "Minecraft username", autocomplete: 'off'

      %fieldset.submit
        = submit_tag 'Add member'

%section.members
  %ul
    - world.players.sort_by{|p| (world.player_opped?(p) ? "0" : "1") + p.username.downcase }.each do |p|
      %li
        = link_to player_path(p.slug), class: 'avatar' do
          = player_avatar_tag p, size: :medium
        .meta
          .username
            = p.username
            - if world.player_opped? p
              %em.highlight (op)
          Joined #{time_ago_in_words(p.created_at)} ago.
          - if p.played?
            Last played #{time_ago_in_words(p.last_connected_at)} ago.

          - if can?(:operate, world) and p != world.creator.minecraft_player
            = link_to 'Remove', player_world_player_path(world.creator.minecraft_player, world, p), method: :delete
