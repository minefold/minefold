- track 'viewed world'
- title world_fullname(world)
- head do
  = og_tags(world)

= render partial: 'worlds/masthead'

- if not world.map?
  .welcome
    %section
      %p Awesomesauce! You can connect to this server at
      %span.host= world.host

      %p.gentle-nudge
        Your map will appear once you start playing. Invite your friends to play too!

      .share
        %a{href: 'https://twitter.com/share', class: 'twitter-share-button', data: {url: player_world_url(world.creator.minecraft_player, world), related: 'minefold', lang: 'en', size: 'large', count: 'none', text: "Join my new Minecraft server at #{world.host}", hashtags: 'minefold:Keep up to date with the latest changes to Minefold'}} Tweet

        %a.facebook-post-button{onClick: 'postToFeed(); return false;' } Post to Facebook

      - js do
        :javascript
          !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");


        <script src='//connect.facebook.net/en_US/all.js'></script>

        :javascript
          FB.init({appId: #{ENV['FB_APP_ID'].to_i.to_json}, status: true, cookie: true});

          function postToFeed() {

            // calling the API ...
            var obj = {
              method: 'feed',
              link: #{player_world_url(world.creator.minecraft_player, world).to_json},
              picture: #{("http://minefold.com" + world.creator.minecraft_player.avatar.large.url).to_json},
              name: #{world.name.to_json},
              summary: #{world.host.to_json},
              description: "Start playing with me on my new Minecraft server!",
              ref: 'new'
            };

            FB.ui(obj, function() {});
          }

- else
  #map
  - head do
    = javascript_include_tag '//maps.google.com/maps/api/js?sensor=false'
  - js do
    :javascript
      $(document).ready(function() {
        var world = new Mf.World(#{render('worlds/base', object: world, formats: [:json])});

        var worldMapView = new Mf.WorldMapView({model: world});
        $('#map').append(worldMapView.el);
        worldMapView.render();
      });

%section.world-meta
  .world-meta-players
    - world.players.each do |player|
      %li
        = link_to player_path(player) do
          = player_avatar_tag player, size: :small

%section
  %aside
    %ol.tags
      - world.tags.each do |tag|
        %li.tag
          %a= tag.name


    %ul.stats
      %li.stat
        %span.val= number_with_delimiter world.players.size
        %span.label= pluralize_text world.players.size, 'member', 'players'

      %li.stat
        - man_hours = (world.minutes_played / 60.0).round(2)
        %span.val= number_with_delimiter man_hours
        %span.label
          = pluralize_text man_hours, 'man hour', 'man hours'

      %li.stat
        %span.val= number_with_delimiter world.pageviews
        %span.label= pluralize_text world.pageviews, 'view', 'views'

      - if world.children.any?
        %li.stat
          %span.val= number_with_delimiter world.children.size
          %span.label= pluralize_text world.children.size, 'clone', 'clones'



  %article
    - if world.comments.any?
      #world-comments
        %h1= pluralize world.comments.count, 'comment', 'comments'
        %ol
          - world.comments.each do |comment|
            - if comment.author.minecraft_player
              %li[comment]
                %h2
                  / %a.badge-link{href: '/pro'}
                  /   %span.badge.badge-pro Pro
                  %a.url{rel: 'contact', title: comment.author.minecraft_player.username, href: player_path(comment.author.minecraft_player)}
                    = player_avatar_tag comment.author.minecraft_player, size: :medium
                    = comment.author.minecraft_player.username
                .comment-body
                  = markdown comment.text

                .comment-meta
                  = link_to "#comment_#{comment.id}", class: 'posted' do
                    = time_ago_in_words(comment.created_at)
                    ago

    - if can? :read, world
      - js do
        :coffeescript
          $ -> $('textarea#comment_text').elastic()

      = form_for world.comments.new, url: player_world_comments_path(world.creator.minecraft_player, world) do |f|
        %h3 Add a new comment (<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank">Markdown Syntax</a>)
        = f.text_area :text, rows: 3
        = f.submit 'Post comment'

