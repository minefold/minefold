- head do
  %meta{property: 'og:title', content: world.name}
  %meta{property: 'og:type',  content: 'fold'}
  %meta{property: 'og:url', content: world_path(world)}
  %meta{property: 'og:image', content: image_path('logo-48.png')}

  - if world.mapped?
    = javascript_include_tag '//maps.google.com/maps/api/js?sensor=false'

- masthead class: 'attached' do
  .attribution
    %h1= world.name

    %p
      by #{link_to world.creator.username, world.creator, rel: 'author'}.
      - if world.cloned?
        Cloned from #{link_to_world "#{world.parent.creator.slug}/#{world.parent.slug}", world.parent}.

  %ol.actions
    - if can? :edit, world
      %li.settings
        = link_to edit_world_path(world) do
          = image_tag 'icons/settings.png', width: 20, height: 20

    %li.members
      = link_to world_members_path(world) do
        = image_tag 'icons/friends.png', width: 30, height: 20

    - if not signed_in? or can? :clone, world
      %li.clone
        - if current_user and cloned_world = world.cloned_world(current_user)
          = link_to 'Your clone', user_world_path(current_user, cloned_world)
        - else
          = form_tag clone_user_world_path(world.creator, world), method: :put do
            = submit_tag 'Clone'

    - if can? :play, world
      %li.play
        - if current_user.current_world == world
          = button_to 'Playing here', nil, disabled: true
        - else
          = button_to 'Play here', [:play, world], method: :put

    - else
      %li.membership-request
        - if signed_in? and world.membership_requests.include_user?(current_user)
          = button_to 'Request sent', nil, disabled: true
        - else
          = button_to 'Ask to play here', world_membership_requests_path(world), method: :post

  %ul.stats
    - if world.children.any?
      %li.stat.members
        %span.val= number_with_delimiter world.children.size
        %span.label= pluralize_text world.children.size, 'clone', 'clones'

    %li.stat.views
      %span.val= number_with_delimiter world.pageviews
      %span.label= pluralize_text world.pageviews, 'view', 'views'

    %li.stat.mins
      %span.val= number_with_delimiter world.minutes_played
      %span.label= pluralize_text world.minutes_played, 'min', 'mins'

    %li.stat.members
      %span.val= number_with_delimiter world.memberships.size
      %span.label= pluralize_text world.memberships.size, 'member', 'members'


  :javascript
    $(document).ready(function(){
      var world = new Mf.World(#{render('worlds/base', object: world, formats: [:json])})
          workspace = new Mf.WorldRouter({world: world});

      $('a[rel=push]').click(function(e) {
        e.preventDefault();

        var href = $(this).attr('href'),
            route = href.replace(world.url(), '');

        workspace.navigate(route, true);
      });

      Backbone.history.start({pushState: true, root: world.url()});
    });
