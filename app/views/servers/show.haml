- title server.name
- layout :servers
- track 'Viewed server', name: server.name, url: server_url(server)

- provide :breakout do
  .page-header
    .container
      .title-bar
        .actions
          - disabled = server.votes.where(ip: request.remote_ip).where('created_at > ?', 1.hour.ago).exists?
          - if disabled
            = button_to "[#{server.votes.count}] Voted!", server_votes_path(server), method: 'post', class: %w(btn btn-small btn-primary btn-vote), data: {toggle: 'button'}, disabled: disabled
          - else
            = button_to "[#{server.votes.count}] Vote for this server!", server_votes_path(server), method: 'post', class: %w(btn btn-small btn-primary btn-vote), data: {toggle: 'button'}, disabled: disabled


        %h1.title= link_to server.name, server_path(server)

    .subnav
      .container
        %ul.nav.nav-table
          %li.active= link_to 'Activity', server
          - if server.game.maps?
            %li= link_to 'Map', [:map, server]
          - if can? :update, server
            %li= link_to 'Settings', [:edit, server]

- content_for :tail do
  :javascript
    $('.btn-vote').click(function(e) {
      e.preventDefault();

      $(this).val('Voted!').attr('disabled', true);

      var form = $(this).parents('form');

      $.post(form.attr('action'));

    });

.server-meta
  .tidbits
    .tidbit
      %strong.key.highlight{style: 'color:black'}
        - if server.shared?
          Minefold account needed to play
        - else
          #{server.creator.username} is paying for everybody

    .tidbit
      %span.key Owner
      %span.val= server.creator.username

    .tidbit
      %span.key Game
      %span.val= server.funpack.game.name

    .tidbit
      %span.key Funpack
      %span.val= server.funpack.name

    .tidbit
      %span.key Created
      %span.val= l server.created_at, :format => :date

    - if server.up?
      .tidbit
        %span.key Address
        %span.val.server-address= server.address

  - # TODO: Hack for Minecraft!
  .player-list
    - online = PartyCloud.players_online(server.party_cloud_id)
    - server.player_uids.each do |username|
      .player{class: online.include?(username) && "online"}
        = image_tag "https://minotar.net/helm/#{username}/24.png", class: 'image-circle', alt: username, width: 24, height: 24

  - if signed_in?
    .span7
      %a{href: url_for(:controller => :invitations, :action => :show, invitation_token: current_user.invitation_token)}== Invite friends for an extra <strong>#{pluralize Bonuses::Referred.coins, 'coin', 'coins'}</strong>

.comments
  - if signed_in?
    = form_for [server, Comment.new], method: 'POST', html: {class: %w(new-comment-form row)} do |f|
      .span1
        = image_tag current_user.avatar.medium.url, width: 60, height: 60

      .span7
        = f.text_area :body, rows: 2
        = f.submit 'Post comment', class: %w(btn)

  - server.comments.each do |comment|
    .comment.row
      .span1
        = image_tag comment.author.avatar.medium.url, width: 60, height: 60
      .span7
        .comment-meta
          %span.comment-author= comment.author.username
          %span.comment-date
            at
            = comment.created_at.strftime('%l:%M%P on %-d/%-m/%Y')
        .comment-body
          = markdown comment.body
